package com.basamadco.opxi.callmanager.pool;

import com.basamadco.opxi.callmanager.DirectoryCallManagerService;
import com.basamadco.opxi.callmanager.OpxiException;
import com.basamadco.opxi.callmanager.entity.EntityNotExistsException;
import com.basamadco.opxi.callmanager.entity.Registration;
import com.basamadco.opxi.callmanager.entity.UserAgent;
import com.basamadco.opxi.callmanager.entity.dao.BaseDAOFactory;
import com.basamadco.opxi.callmanager.entity.dao.DAOException;
import com.basamadco.opxi.callmanager.entity.dao.DAOFactoryException;
import com.basamadco.opxi.callmanager.entity.dao.directory.AgentDAO;
import com.basamadco.opxi.callmanager.entity.profile.OpxiCMEntityProfile;
import com.basamadco.opxi.callmanager.profile.ProfileException;
import com.basamadco.opxi.callmanager.sip.util.SipUtil;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Handles all Agent management stuff in Opxi Call Manager. responsible
 * for creating, destroying, adding, removing and refreshing Agents in
 * system memory.
 * <p/>
 * Since Agent state changes seems not to be a concurrency issue
 * I've add no concurrency control here till now. e.g.
 * There's no need to define a critical section to add new agent
 * into AgentService, as there "NORMALY" will be one request to update an
 * agent global state (usually from the AgentMan).
 *
 * @author Jrad
 *         Date: Feb 20, 2006
 *         Time: 3:17:59 PM
 * @see com.basamadco.opxi.callmanager.pool.PoolService
 */
public class AgentService extends DirectoryCallManagerService {

    private static final Logger logger = Logger.getLogger( AgentService.class.getName() );


    private final Map<String, Agent> agentCache = new ConcurrentHashMap<String, Agent>();

    private AgentDAO dao;


    public AgentService() {
        try {
            this.dao = BaseDAOFactory.getDirectoryDAOFactory().getAgentDAO();
        } catch ( DAOException e ) {
            logger.log( Level.SEVERE, e.getMessage(), e );
            throw new RuntimeException( e.getMessage(), e );
        } catch ( DAOFactoryException e ) {
            logger.log( Level.SEVERE, e.getMessage(), e );
            throw new RuntimeException( e.getMessage(), e );
        }
    }

    /**
     * Added to capsulate Agent access into QMS
     * This method may result in high contension on listAgents cache
     *
     * @param aor Agent's ID
     * @return Agent object representing this agent in opxi front manager
     * @throws AgentNotAvailableException if no agent is exists in the current system cache
     */
    public Agent getAgentByAOR( String aor ) throws AgentNotAvailableException {
        if (agentCache.containsKey( aor )) {
            Agent agent = (Agent) agentCache.get( aor );
            logger.finest( "***** Fetching Agent with AOR = " + agent );
            return agent;
        }
        throw new AgentNotAvailableException( "No agent for name '" + aor + "' is available in AgentService" );
    }

    public boolean isAgentAvailableFor( UserAgent ua ) {
        try {
            getAgentByAOR( ua.getSipURIString() );
            return true;
        } catch ( AgentNotAvailableException e ) {
            return false;
        }
    }

    public Agent getAgentForUA( UserAgent ua ) throws AgentNotAvailableException {
        return getAgentByAOR( ua.getSipURIString() );
    }

    private Agent getOrLoadAgentForUA( Registration contact ) throws DAOException {
        try {
            return getAgentForUA( contact.getUserAgent() );
        } catch ( AgentNotAvailableException e ) {
            return loadAgent( contact );
        }
    }

    /**
     * Creates an Agent object for the specified ua and read's Agent's profile
     *
     * @param contact
     * @return the new Agent
     * @throws DAOException
     */
    private Agent loadAgent( Registration contact ) throws DAOException {
        try {
            logger.finest( "Load agent for: " + contact );
            Agent freshAgent = (Agent) dao.read( contact.getUserAgent().getName() );
            freshAgent.setAOR( contact.getUserAgent().getSipURIString() );
            freshAgent.setActive( contact.getUserAgent().isActive() );
            freshAgent.setServiceFactory( getServiceFactory() );
            OpxiCMEntityProfile profile = BaseDAOFactory.getWebdavDAOFactory().getAgentProfileDAO( contact.getUserAgent().getName() ).readProfile();
            freshAgent.assignProfile( profile );
            agentCache.put( freshAgent.getAOR(), freshAgent );
            freshAgent.setActivityLogId( getServiceFactory().getLogService().openAgentActivityLogger( contact.getUserAgent() ) );
//            freshAgent.setContact(getServiceFactory().getSipService().getSipFactory().createURI(contact.getLocation()));
            freshAgent.setRegistration( contact );
            return freshAgent;
        } catch ( EntityNotExistsException ee ) {
            throw new DAOException( ee.getMessage(), ee );
        } catch ( DAOFactoryException ee ) {
            throw new DAOException( ee.getMessage(), ee );
        } catch ( ProfileException ee ) {
            throw new DAOException( ee.getMessage(), ee );
        }
    }

    /*private Agent loadAgent(String aor) throws DAOException {
        return loadAgent(new UserAgent(aor));
    }*/


    private Agent removeAgentFromCache( String agentAOR ) {
        if (agentCache.containsKey( agentAOR )) {
            return ( (Agent) agentCache.remove( agentAOR ) );
        } else {
            throw new IllegalStateException( "No Agent object for " + agentAOR + " in cache." );
        }
    }

    /**
     * Unloads the Agent with specified AOR, closes his/her activity log and then destroys it
     *
     * @param ua UserAgent object for which Agent Object should be removed from AgentService
     * @throws OpxiException
     */
    private void removeAgent( UserAgent ua ) throws OpxiException {
        logger.finest( "Removing agent from agent service: " + ua );
        Agent agent = removeAgentFromCache( ua.getSipURIString() );
        getServiceFactory().getPoolService().unassignPoolMemberships( agent );
        getServiceFactory().getLogService().closeAgentActivityLogger( agent.getActivityLogId(), ua.getNote() );
        agent.dispose();
    }


    public void handleLogoff( Registration contact ) throws OpxiException {
        logger.fine( "Handle Logoff for: " + contact );
        if (isAgentAvailableFor( contact.getUserAgent() )) {
            Agent agent = getAgentForUA( contact.getUserAgent() );
            updateAgentFromPresence( agent, contact );
            getServiceFactory().getPoolService().unassignPoolMemberships( agent );
        }
    }

    /**
     * Called when an Agent logins with presence service
     *
     * @param contact
     * @throws OpxiException
     */

    public void handleLogin( Registration contact ) throws OpxiException {
        logger.fine( "Handle login for: " + contact );
        Agent agent = getOrLoadAgentForUA( contact );
        updateAgentFromPresence( agent, contact );
        getServiceFactory().getPoolService().assignPoolMemberships( agent );
        for (int i = 0; i < agent.getMaxOpenCalls(); i++) {
            getServiceFactory().getQueueManagementService().serviceAgentIdleEvent(
                    contact.getUserAgent().getSipURIString()
            );
        }
    }

    public void handleLoginBusy( Registration contact ) throws OpxiException {
        logger.finest( "Handle Login-Busy for: " + contact );
        Agent agent = getAgentForUA( contact.getUserAgent() );
        updateAgentFromPresence( agent, contact );
        getServiceFactory().getPoolService().assignPoolMemberships( agent );
    }

    public void handleBusy( Registration contact ) throws OpxiException {
        logger.finest( "Handle busy for: " + contact );
        updateAgentFromPresence( getAgentForUA( contact.getUserAgent() ), contact );
    }

    /**
     * Called when a busy agent is made him avilable
     *
     * @param contact The Registration object
     * @throws OpxiException
     */
    public void handleReady( Registration contact ) throws OpxiException {
        logger.finest( "Handle ready for: " + contact );
        Agent agent = getAgentForUA( contact.getUserAgent() );
        updateAgentFromPresence( agent, contact );
        for (int i = 0; i < agent.getMaxOpenCalls().intValue(); i++) {
            getServiceFactory().getQueueManagementService().serviceAgentIdleEvent( contact.getUserAgent().getSipURIString() );
        }
    }

    public void updateAgentFromPresence( Registration reg ) throws OpxiException {
        updateAgentFromPresence( getAgentForUA( reg.getUserAgent() ), reg );
    }

    private void updateAgentFromPresence( Agent agent, Registration reg ) throws OpxiException {
        agent.setActive( reg.getUserAgent().isActive() );
        agent.setRegistration( reg );
        getServiceFactory().getLogService().getAgentActivityLogger( agent.getActivityLogId() ).addPresence( reg );
    }

    /**
     * There should be some IP-based relation between REGISTERs and PUBLISHes
     * Notifies this service of UserAgent's registration events
     *
     * @register registration The registration Object
     */
    public void handleRegister( Registration contact ) throws OpxiException {
        logger.finest( "Handle Register for: " + contact );
        Agent agent;
        if (isAgentAvailableFor( contact.getUserAgent() )) {
            agent = getAgentForUA( contact.getUserAgent() );
            logger.finest( "***** The agent for this registration loaded before this registration." );
        } else {
            agent = loadAgent( contact );
        }
        getServiceFactory().getLogService().getAgentActivityLogger( agent.getActivityLogId() ).addRegistration( contact );
        // TODO we're also taking opxiIVR into account...!
        getServiceFactory().getLogService().getServiceActivityLogger().setOnlineAgents( agents().size() );
    }


    public void handleRefreshRegister( Registration contact ) throws OpxiException {
    }

    public void handleRecoverRegister( Registration contact ) throws OpxiException {
        logger.finest( "Handle Recover Register for: " + contact );
        if (isAgentAvailableFor( contact.getUserAgent() )) {
            Agent agent = getAgentForUA( contact.getUserAgent() );
            logger.finest( "***** The agent for this registration loaded before this registration." );
            getServiceFactory().getLogService().getAgentActivityLogger( agent.getActivityLogId() ).addUnregistration( contact );
        }
    }

    /**
     * Notifies this service of UserAgent's un-register events
     *
     * @param contact The registration that requested to un-register
     */
    public void handleUnregister( Registration contact ) throws OpxiException {
        logger.finest( "Handle UnRegister for: " + contact );
        Agent agent = getAgentForUA( contact.getUserAgent() );
        getServiceFactory().getLogService().getAgentActivityLogger( agent.getActivityLogId() ).addUnregistration( contact );
        if (!getServiceFactory().getLocationService().findRegistrations( contact.getUserAgent() ).isEmpty()) return;
        removeAgent( contact.getUserAgent() );
        getServiceFactory().getLogService().getServiceActivityLogger().setOnlineAgents( agents().size() );
    }

    /**
     * Notifies Agent objects for profile updates
     *
     * @param profile an agent profile
     */
    public void agentProfileUpdateNotification( OpxiCMEntityProfile profile ) {
        try {
            String agentName = getDAOFactory().getAgentDAO().getCNForDN( profile.getOpxiCMEntityProfileChoice().getAgentProfile().getDN() );
            getAgentByAOR( SipUtil.toSipURIString( agentName ) ).assignProfile( profile );
        } catch ( DAOException e ) {
            logger.log( Level.SEVERE, e.getMessage(), e );
        } catch ( AgentNotAvailableException e ) {
            logger.log( Level.SEVERE, e.getMessage(), e );
        } catch ( ProfileException e ) {
            logger.log( Level.SEVERE, e.getMessage(), e );
        }
    }

    /**
     * Returns a read-only list of all currently listAgents
     *
     * @return a list of Agent objects
     */
    public List agents() {
        Object[] content = agentCache.values().toArray();
        List ags = new ArrayList();
        for (int i = 0; i < content.length; i++) {
            ags.add( content[i] );
        }
        return Collections.unmodifiableList( ags );
    }

    /*public String getAgentStatus(Agent agent) {
        boolean isAssigned = getServiceFactory().getPoolService().isAgentAssigned(agent);
        if (!isAssigned) return "offline";
        if (isAssigned && agent.isActive()) return "available";
        if (isAssigned && !agent.isActive()) return "busy";
        return "unknown";
    }*/

    public List listObjects() {
        return agents();
    }

    public void dispose() {
        List all = agents();
        for (int i = 0; i < all.size(); i++) {
            Agent agent = (Agent) all.get( i );
            agent.dispose();
        }
        agentCache.clear();
        logger.info( "AgentService destroyed successfully." );
    }

}