package com.basamadco.opxi.callmanager.util;

import com.basamadco.opxi.callmanager.OpxiException;
import org.apache.commons.beanutils.PropertyUtils;

import java.io.File;
import java.io.FilenameFilter;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Modifier;
import java.net.Inet4Address;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * @author Jrad
 *         Date: Jan 30, 2006
 *         Time: 4:12:22 PM
 */
public abstract class OpxiToolBox {


    /**
     * Resolves Call Manager host server's domain name from hard coded
     * domain property in application properties file.
     * If no value is set there, it will dynamically return the
     * canonical host name of the server.
     * @return Call Manager's working domain name 
     */
    public static String getLocalDomain() {

//        if( isEmpty( name ) ) {
        String name = "";
            try {
//                name = InetAddress.getLocalHost().getCanonicalHostName();
                Enumeration adds = NetworkInterface.getByName( "eth0" ).getInetAddresses();
                while( adds.hasMoreElements() ) {
                    InetAddress add = ((InetAddress)adds.nextElement());
                    if( add instanceof Inet4Address ) {
                        name = add.getCanonicalHostName();
                        return name.substring( name.indexOf( "." ) + 1 );
                    }
                }
            } catch ( Throwable t ) {
                t.printStackTrace();
            }
//        } else {
//            return name;
//        }
        return PropertyUtil.getProperty( "opxi.callmanager.domain" );
    }

    /**
     * Returns the Call Manager host server's local name
     * @return local ip address or null if any error happens
     */
    public static String getLocalIP() {
        try {
            Enumeration adds = NetworkInterface.getByName( "eth0" ).getInetAddresses();
            while( adds.hasMoreElements() ) {
                InetAddress add = ((InetAddress)adds.nextElement());
                if( add instanceof Inet4Address) {
                    return add.getHostAddress();
                }
            }
        } catch ( Exception e ) {
            e.printStackTrace();
        }
        try {
            return InetAddress.getLocalHost().getHostAddress();
        } catch ( UnknownHostException e ) {
            e.printStackTrace();
            return null;
        }
    }

    /**
     * Returns the name of the specified class without package name
     * @param clazz
     * @return the class name
     */
    public static String unqualifiedClassName( Class clazz ) {
        String fullName = clazz.getName();
        if( fullName.indexOf( "." ) >= 0 ) {
            return fullName.substring(  fullName.lastIndexOf( "." ) + 1 );
        }
        return fullName;
    }


    private static final String PHONE_NUMBER_REGEX = "^\\+?(\\d|\\*|\\.)+";
    private static final Pattern PHONE_NUMBER_PATTERN = Pattern.compile( PHONE_NUMBER_REGEX );

    /**
     * Checks if the input string matches a valid phone number with the pattern
     * specified by regular expression "^\+?\d+"
     * @param value The string to match
     * @return true if input string represents a valid phone number
     */
    public static boolean isPhoneNumber( String value ) {
        if( value == null ) {
            return false;
        }
        Matcher phoneNumber = PHONE_NUMBER_PATTERN.matcher( value );
        return phoneNumber.matches();
//        try {
//            Integer.parseInt( value );
//            return true;
//        } catch( NumberFormatException e ) {
//            return false;
//        }
    }

    private static final Object[] param = new Object[] { };
    private static final Class[] type = new Class[] { };
    public static Object invokeGetterMethod( Object o, String property ) throws OpxiException {
        if( o != null && property != null ) {
            try {
                String methodName = "get" + Character.toUpperCase( property.charAt( 0 ) ) + property.substring( 1 );
                return o.getClass().getMethod( methodName, type ).invoke( o, param );
            } catch ( IllegalAccessException e ) {
                throw new OpxiException( e.getMessage(), e );
            } catch ( InvocationTargetException e ) {
                throw new OpxiException( e.getMessage(), e );
            } catch ( NoSuchMethodException e ) {
                throw new OpxiException( e.getMessage(), e );
            }
        }
        throw new OpxiException( "Invalid argument: null" );
    }

    public static void invokeSetterMethod( Object o, String propertyName, Object propertyValue ) throws OpxiException {
        if( o != null && propertyName != null && propertyValue != null ) {
            try {
                String methodName = "set" + Character.toUpperCase( propertyName.charAt( 0 ) ) + propertyName.substring( 1 );
                o.getClass().getMethod(
                        methodName, new Class[] { propertyValue.getClass() }
                ).invoke( o, new Object[] { propertyValue } );
            } catch ( IllegalAccessException e ) {
                throw new OpxiException( e.getMessage(), e );
            } catch ( InvocationTargetException e ) {
                throw new OpxiException( e.getMessage(), e );
            } catch ( NoSuchMethodException e ) {
                throw new OpxiException( e.getMessage(), e );
            }
        }
    }

    public static Class[] getClasses( Class clazz ) throws ClassNotFoundException {
        return getClasses( null, clazz );
	}

    public static Class[] getClasses( String packageName ) throws ClassNotFoundException {
        return getClasses( packageName, null );
	}

    /**
     * NOTE: Just searches for the subclasses placed in the same package as the input base class
     *
     * @param clazz
     * @return an array of found classes
     * @throws ClassNotFoundException
     */
    public static Class[] getConcreteSubClasses( Class clazz ) throws ClassNotFoundException {
        List l = new ArrayList();
        Class[] classes = OpxiToolBox.getClasses( clazz );
        for (int i = 0; i < classes.length; i++) {
            Class aClass = classes[i];
            try {
                aClass.asSubclass( clazz );
                if( !Modifier.isAbstract( aClass.getModifiers() ) ) {
                    l.add( aClass );
                }
            } catch( ClassCastException e ) {
            }
        }
        Class[] result = new Class[ l.size() ];
        return (Class[]) l.toArray( result );
    }

    private static Class[] getClasses( String packageName, Class clazz ) throws ClassNotFoundException {
        if( clazz == null ) {
            clazz = OpxiToolBox.class;
        }
        if( packageName == null ) {
            packageName = clazz.getPackage().getName();
        }
        String dir = packageName.replace( '.', '/' );
        File f = new File( clazz.getClassLoader().getResource( dir ).getPath().replaceAll( "%20", " " ) );
        File[] classFiles = f.listFiles( new ClassFileFilter() );
        Class[] classes = new Class[ classFiles.length ];
		for( int i = 0; i < classFiles.length;i++ ) {
			classes[ i ] = Class.forName( packageName + "." + classFiles[ i ].getName().split( ".class" )[0] );
		}
		return classes;
	}

    public static Field[] getBeanProperties( Class clazz ) throws OpxiException {
        try {
            Field[] fields = clazz.getDeclaredFields();
            Object o = clazz.newInstance();
            ArrayList l = new ArrayList();
            for (int j = 0; j < fields.length; j++) {
                Field field = fields[j];
                if( PropertyUtils.isWriteable( o, field.getName() ) &&
                    PropertyUtils.isReadable( o, field.getName() ) ) {
                        l.add( field );
                }
            }
            Field[] result = new Field[ l.size() ];
            for( int i = 0; i < result.length; i++ ) {
                result[ i ] = (Field)l.get( i );
            }
            return result;
        } catch ( InstantiationException e ) {
            throw new OpxiException( e );
        } catch ( IllegalAccessException e ) {
            throw new OpxiException( e );
        }
    }

    public static boolean isEmpty( String string ) {
        return string == null || string.length() == 0;
    }

    public static String duration( long duration ) {
        long hours, minutes, seconds;
        duration = duration / 1000;
        float millis = duration % 1000;
        hours = duration / 3600;
        duration = duration - (hours * 3600);
        minutes = duration / 60;
        duration = duration - (minutes * 60);
        seconds = duration;
        return ( hours > 9 ? Long.toString( hours ) : "0"+hours ) +
                ":" +
                ( minutes > 9 ? Long.toString( minutes ) : "0"+minutes ) +
                ":" +
                ( seconds > 9 ? Long.toString( seconds ) : "0"+seconds ) +
                "s";
    }

    public static String duration( int duration ) {
        int hours, minutes, seconds;
        duration = duration / 1000;
        float millis = duration % 1000;
        hours = duration / 3600;
        duration = duration - (hours * 3600);
        minutes = duration / 60;
        duration = duration - (minutes * 60);
        seconds = duration;
        return minutes + "m:" + seconds + "s";
    }

}

class ClassFileFilter implements FilenameFilter {
	public boolean accept( File dir,String name ) {
        if( name.length() > 6 ) {
            if( name.indexOf( ".class" ) == name.length() - 6 ) {
                return true;
            }
        }
        return false;

	}
}